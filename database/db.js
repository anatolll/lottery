const MongoClient = require('mongodb').MongoClient;

const GamesCollectionName = 'games';

class Db {
  /**
   * @param connectionString Mongodb Connection string (example: 'mongodb://localhost:27017')
   */
  constructor (connectionString) {
    this.connectionString = connectionString;
    this.client           = null;
    this.db               = null;
    this.gamesCollection  = null;
  }

  /**
   * Connect to database
   * @param databaseName Database name
   * @returns {Promise<void>}
   */
  async connect (databaseName) {
    if (!this.client) {
      this.client          = await MongoClient.connect(this.connectionString, {useNewUrlParser: true});
      this.db              = this.client.db(databaseName);
      this.gamesCollection = this.db.collection(GamesCollectionName);
    }
  }

  /**
   * Disconnect from database
   */
  disconnect () {
    if (this.client) {
      this.db              = null;
      this.gamesCollection = null;
      this.client.close();
    }
  }

  /**
   * Save new game in database
   * @param {number[]} numbers Array of random numbers
   * @param {string} signature Signature from random.org
   * @param {string} randomOrgJson Full response from random.org
   * @returns {Promise<{document}>}
   */
  async createGame (numbers, signature, randomOrgJson) {
    if (!Array.isArray(numbers) || !numbers.every(value => typeof value === 'number')) {
      throw new Error('"numbers" must be a array of number');
    }
    if (typeof signature !== 'string') {
      throw new Error('"signature" must be a string');
    }
    if (typeof randomOrgJson !== 'string') {
      throw new Error('"randomOrgJson" must be a string');
    }

    return await this.gamesCollection.insertOne({
      //_id is autogenerated by mongo
      createdAt:    new Date(),       //game creation time
      selectedCell: -1,               //player don't yet interacted with game
      prize:        0,                //player don't yet finish game
      numbers,
      signature,
      randomOrgJson
    });
  }

  /**
   * Get game history
   * @param {number} pageNumber
   * @param {number} pageSize
   * @returns {Promise<object[]>}
   */
  async readGames (pageNumber = 0, pageSize = 50) {
    const MaxPageSize = 100;

    if (typeof pageNumber !== 'number' || pageNumber < 0) {
      throw new Error('Page number must be greater or equal than 0');
    }
    if (typeof pageSize !== 'number' || pageSize <= 0 || pageSize > MaxPageSize) {
      throw new Error(`Page size must be in range 0..${MaxPageSize}`);
    }

    return await this.gamesCollection.find({}, {
      sort:  {createdAt: -1},
      skip:  pageNumber * pageSize,
      limit: pageSize,
    }).toArray();
  }
}

module.exports = Db;